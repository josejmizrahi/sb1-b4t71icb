/*
  # MitzvahPoints System Implementation

  1. New Tables
    - `mitzvah_categories`
      - Categories of contributions (e.g., learning, teaching, volunteering)
    - `mitzvah_actions`
      - Specific actions that can earn points
    - `mitzvah_points`
      - Records of points earned by users
    - `mitzvah_levels`
      - Achievement levels based on accumulated points

  2. Security
    - Enable RLS on all tables
    - Policies for viewing and earning points
    - Admin policies for managing categories and actions

  3. Functions
    - Award points function
    - Calculate level function
    - Get user statistics function
*/

-- Create mitzvah categories table
CREATE TABLE mitzvah_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create mitzvah actions table
CREATE TABLE mitzvah_actions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category_id BIGINT REFERENCES mitzvah_categories(id),
  name TEXT NOT NULL,
  description TEXT,
  points INTEGER NOT NULL,
  cooldown_hours INTEGER DEFAULT 24,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create mitzvah points table
CREATE TABLE mitzvah_points (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES profiles(id),
  action_id BIGINT REFERENCES mitzvah_actions(id),
  points INTEGER NOT NULL,
  evidence TEXT,
  verified BOOLEAN DEFAULT false,
  verified_by UUID REFERENCES profiles(id),
  earned_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create mitzvah levels table
CREATE TABLE mitzvah_levels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  points_required INTEGER NOT NULL,
  badge_url TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE mitzvah_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE mitzvah_actions ENABLE ROW LEVEL SECURITY;
ALTER TABLE mitzvah_points ENABLE ROW LEVEL SECURITY;
ALTER TABLE mitzvah_levels ENABLE ROW LEVEL SECURITY;

-- Policies for mitzvah categories
CREATE POLICY "Categories are viewable by everyone"
  ON mitzvah_categories FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can modify categories"
  ON mitzvah_categories
  USING (
    EXISTS (
      SELECT 1 FROM profile_roles pr
      WHERE pr.profile_id = auth.uid()
      AND pr.role_id = (SELECT id FROM roles WHERE name = 'admin')
    )
  );

-- Policies for mitzvah actions
CREATE POLICY "Actions are viewable by everyone"
  ON mitzvah_actions FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can modify actions"
  ON mitzvah_actions
  USING (
    EXISTS (
      SELECT 1 FROM profile_roles pr
      WHERE pr.profile_id = auth.uid()
      AND pr.role_id = (SELECT id FROM roles WHERE name = 'admin')
    )
  );

-- Policies for mitzvah points
CREATE POLICY "Users can view their own points"
  ON mitzvah_points FOR SELECT
  TO authenticated
  USING (profile_id = auth.uid());

CREATE POLICY "Users can add their own points"
  ON mitzvah_points FOR INSERT
  TO authenticated
  WITH CHECK (profile_id = auth.uid());

-- Policies for mitzvah levels
CREATE POLICY "Levels are viewable by everyone"
  ON mitzvah_levels FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can modify levels"
  ON mitzvah_levels
  USING (
    EXISTS (
      SELECT 1 FROM profile_roles pr
      WHERE pr.profile_id = auth.uid()
      AND pr.role_id = (SELECT id FROM roles WHERE name = 'admin')
    )
  );

-- Function to calculate user's current level
CREATE OR REPLACE FUNCTION get_user_level(user_id UUID)
RETURNS TABLE (
  level_id BIGINT,
  level_name TEXT,
  level_description TEXT,
  badge_url TEXT,
  total_points INTEGER,
  next_level_points INTEGER
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  total_user_points INTEGER;
  next_level_req INTEGER;
BEGIN
  -- Get user's total points
  SELECT COALESCE(SUM(points), 0)
  INTO total_user_points
  FROM mitzvah_points
  WHERE profile_id = user_id
  AND verified = true;

  -- Get user's current level
  RETURN QUERY
  WITH user_level AS (
    SELECT *
    FROM mitzvah_levels
    WHERE points_required <= total_user_points
    ORDER BY points_required DESC
    LIMIT 1
  ),
  next_level AS (
    SELECT points_required
    FROM mitzvah_levels
    WHERE points_required > total_user_points
    ORDER BY points_required ASC
    LIMIT 1
  )
  SELECT
    ul.id,
    ul.name,
    ul.description,
    ul.badge_url,
    total_user_points,
    COALESCE(nl.points_required, ul.points_required)
  FROM user_level ul
  LEFT JOIN next_level nl ON true;
END;
$$;

-- Insert initial categories
INSERT INTO mitzvah_categories (name, description, icon) VALUES
('Learning', 'Engaging in Torah study and Jewish education', 'book'),
('Teaching', 'Sharing knowledge and mentoring others', 'users'),
('Community', 'Contributing to community projects and events', 'heart'),
('Chesed', 'Acts of kindness and helping others', 'hands-helping'),
('Innovation', 'Creating tools and resources for the community', 'lightbulb');

-- Insert initial actions
INSERT INTO mitzvah_actions (category_id, name, description, points) VALUES
((SELECT id FROM mitzvah_categories WHERE name = 'Learning'), 'Complete Daily Learning', 'Complete a daily Torah study session', 5),
((SELECT id FROM mitzvah_categories WHERE name = 'Teaching'), 'Lead a Study Group', 'Organize and lead a study session', 15),
((SELECT id FROM mitzvah_categories WHERE name = 'Community'), 'Organize Event', 'Plan and execute a community event', 25),
((SELECT id FROM mitzvah_categories WHERE name = 'Chesed'), 'Volunteer', 'Volunteer time for community service', 10),
((SELECT id FROM mitzvah_categories WHERE name = 'Innovation'), 'Create Resource', 'Develop a new community resource', 20);

-- Insert initial levels
INSERT INTO mitzvah_levels (name, description, points_required, badge_url) VALUES
('Initiate', 'Beginning your journey', 0, '/badges/initiate.svg'),
('Builder', 'Contributing to the community', 100, '/badges/builder.svg'),
('Leader', 'Taking initiative in projects', 500, '/badges/leader.svg'),
('Mentor', 'Guiding others in their journey', 1000, '/badges/mentor.svg'),
('Sage', 'Exemplifying community values', 5000, '/badges/sage.svg');