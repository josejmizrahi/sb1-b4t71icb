/*
  # Roles and Audit System Setup

  1. New Tables
    - `roles`: Define system roles
      - `id` (bigint, identity)
      - `name` (text, unique)
      - `description` (text)
      - `permissions` (jsonb)

    - `profile_roles`: Link profiles to roles
      - `profile_id` (uuid, references profiles)
      - `role_id` (bigint, references roles)
      - `granted_at` (timestamptz)
      - `granted_by` (uuid)

    - `audit_logs`: Track system actions
      - `id` (bigint, identity)
      - `profile_id` (uuid)
      - `action` (text)
      - `details` (jsonb)
      - `ip_address` (text)
      - `user_agent` (text)
      - `created_at` (timestamptz)

  2. Security
    - Enable RLS
    - Add policies for role management
    - Set up audit logging
*/

-- Create roles table
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    description TEXT,
    permissions JSONB DEFAULT '{}'::jsonb
);

-- Create profile roles table
CREATE TABLE profile_roles (
    profile_id UUID REFERENCES profiles(id),
    role_id BIGINT REFERENCES roles(id),
    granted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    granted_by UUID REFERENCES profiles(id),
    PRIMARY KEY (profile_id, role_id)
);

-- Create audit logs table
CREATE TABLE audit_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    profile_id UUID REFERENCES profiles(id),
    action TEXT NOT NULL,
    details JSONB,
    ip_address TEXT,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE profile_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;

-- Insert basic roles
INSERT INTO roles (name, description, permissions) VALUES
('admin', 'System administrator', '{"can_manage_users": true, "can_verify_users": true}'::jsonb),
('verifier', 'Can verify user identities', '{"can_verify_users": true}'::jsonb),
('moderator', 'Can moderate content', '{"can_moderate_content": true}'::jsonb),
('user', 'Regular user', '{}'::jsonb);

-- Roles and audit policies
CREATE POLICY "Roles are viewable by authenticated users"
    ON roles FOR SELECT
    TO authenticated;

CREATE POLICY "Only admins can manage roles"
    ON roles
    USING (
        EXISTS (
            SELECT 1 FROM profile_roles pr
            WHERE pr.profile_id = auth.uid()
            AND pr.role_id = (SELECT id FROM roles WHERE name = 'admin')
        )
    );

CREATE POLICY "Users can view their own roles"
    ON profile_roles FOR SELECT
    USING (profile_id = auth.uid());

CREATE POLICY "Audit logs viewable by admins"
    ON audit_logs FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM profile_roles pr
            WHERE pr.profile_id = auth.uid()
            AND pr.role_id = (SELECT id FROM roles WHERE name = 'admin')
        )
    );